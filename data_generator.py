from wedapp import create_app, db
from wedapp.auth import bcrypt
from wedapp.posts.models import Post, Tag
from wedapp.auth.models import User, Role
import random
from faker import Faker

# The test roles of app
fake_roles = ["default", "author", "administrator"]

# Test users
fake_users = [
    {"username": "user_default", "role": 'default'},
    {"username": "user_author", "role": "author"},
    {"username": "admin", "role": "administrator"}
    ]

Faker.seed(0)
faker = Faker()


# Generate users
def user_generator():
    users = list()
    for fake_user in fake_users:
        user = User.query.filter_by(username=fake_user["username"]).first()
        if user:
            users.append(user)
            continue
        user = User(fake_user["username"])
        author = Role.query.filter_by(name=fake_user["role"]).first()
        # user.username = fake_user["username"]
        user.password = bcrypt.generate_password_hash("12345678")
        user.roles.append(author)
        try:
            db.session.add(user)
            db.session.commit()
            users.append(user)
        except Exception as err:
            print(f"Fail to add user {user} with error {err}")
            db.session.rollback()
    return users


# Generate tags for post
def tag_generator(qty):
    tags = list()
    for _ in range(qty):
        tag = Tag()
        tag.title = faker.color_name()
        try:
            db.session.add(tag)
            db.session.commit()
            tags.append(tag)
        except Exception as err:
            print(f"Fail to add tag {tag} with error {err}")
            db.session.rollback()
    return tags


# Roles generator
def role_generator():
    roles = list()
    for fake_role in fake_roles:
        role = Role.query.filter_by(name=fake_role).first()
        if role:
            roles.append(role)
            continue
        role = Role(fake_role)
        db.session.add(role)
        try:
            db.session.commit()
            roles.append(fake_role)
        except Exception as err:
            print(f"Fail to add role {err}")
            db.session.rollback()
    return roles


# Generate post
def post_geneartor(qty, users, tags):
    for _ in range(qty):
        post = Post()
        post.title = faker.sentence()
        post.text = faker.text(max_nb_chars=1000)
        # Generate date-time and translate in for MySQL
        time_date = faker.date_time_this_decade(before_now=True, after_now=False, tzinfo=None)
        post.publish_date = time_date.strftime('%Y-%m-%d %H:%M:%S')
        # Random user from users list generated by "user_generator" function
        post.user_id = users[random.randrange(0, len(users))].id
        # 3 tags for each post from tags list generated by "tag_generator" function
        post.tags = [tags[random.randrange(0, len(tags))] for _ in range(0, 3)]
        try:
            db.session.add(post)
            db.session.commit()
        except Exception as err:
            print(f"Fail to add post {post} with error {err}")
            db.session.rollback()


if __name__ == '__main__':
    app = create_app(f"config.DevConfig")
    db.init_app(app)
    # Fill database with app context
    with app.app_context():
        role_generator()
        post_geneartor(100, user_generator(), tag_generator(10))
