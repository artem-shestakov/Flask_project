from app.wedapp import db
from app.wedapp.posts import User, Post, Tag
import random
from faker import Faker

Faker.seed(0)
faker = Faker()


# Generate users
def user_generator(qty):
    users = list()
    for _ in range(qty):
        user = User()
        user.username = faker.first_name()
        user.password = faker.hexify(text="^^^^^^^^^^")
        try:
            db.session.add(user)
            db.session.commit()
            users.append(user)
        except Exception as err:
            print(f"Fail to add user {user} with error {err}")
            db.session.rollback()
    return users


# Generate tags for post
def tag_generator(qty):
    tags = list()
    for _ in range(qty):
        tag = Tag()
        tag.title = faker.color_name()
        try:
            db.session.add(tag)
            db.session.commit()
            tags.append(tag)
        except Exception as err:
            print(f"Fail to add tag {tag} with error {err}")
            db.session.rollback()
    return tags


# Generate post
def post_geneartor(qty, users, tags):
    for _ in range(qty):
        post = Post()
        post.title = faker.sentence()
        post.text = faker.text(max_nb_chars=1000)
        # Generate date-time and translate in for MySQL
        time_date = faker.date_time_this_decade(before_now=True, after_now=False, tzinfo=None)
        post.publish_date = time_date.strftime('%Y-%m-%d %H:%M:%S')
        # Random user from users list generated by "user_generator" function
        post.user_id = users[random.randrange(0, len(users))].id
        # 3 tags for each post from tags list generated by "tag_generator" function
        post.tags = [tags[random.randrange(0, len(tags))] for _ in range(0, 3)]
        try:
            db.session.add(post)
            db.session.commit()
        except Exception as err:
            print(f"Fail to add post {post} with error {err}")
            db.session.rollback()


if __name__ == '__main__':
    post_geneartor(25, user_generator(10), tag_generator(10))
